package org.eclipse.stem.tests.util.labels.provider;

/*******************************************************************************
 * Copyright (c) 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.stem.tests.util.labels.util.LabelsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class LabelsItemProviderAdapterFactory extends LabelsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LabelsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.tests.util.labels.TestDynamicLabel1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestDynamicLabel1ItemProvider testDynamicLabel1ItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.tests.util.labels.TestDynamicLabel1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestDynamicLabel1Adapter() {
		if (testDynamicLabel1ItemProvider == null) {
			testDynamicLabel1ItemProvider = new TestDynamicLabel1ItemProvider(this);
		}

		return testDynamicLabel1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.tests.util.labels.TestDynamicNodeLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestDynamicNodeLabelItemProvider testDynamicNodeLabelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.tests.util.labels.TestDynamicNodeLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestDynamicNodeLabelAdapter() {
		if (testDynamicNodeLabelItemProvider == null) {
			testDynamicNodeLabelItemProvider = new TestDynamicNodeLabelItemProvider(this);
		}

		return testDynamicNodeLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.tests.util.labels.TestIntegerLabelValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestIntegerLabelValueItemProvider testIntegerLabelValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.tests.util.labels.TestIntegerLabelValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestIntegerLabelValueAdapter() {
		if (testIntegerLabelValueItemProvider == null) {
			testIntegerLabelValueItemProvider = new TestIntegerLabelValueItemProvider(this);
		}

		return testIntegerLabelValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.tests.util.labels.TestLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestLabelItemProvider testLabelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.tests.util.labels.TestLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestLabelAdapter() {
		if (testLabelItemProvider == null) {
			testLabelItemProvider = new TestLabelItemProvider(this);
		}

		return testLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.tests.util.labels.TestStaticNodeLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestStaticNodeLabelItemProvider testStaticNodeLabelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.tests.util.labels.TestStaticNodeLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestStaticNodeLabelAdapter() {
		if (testStaticNodeLabelItemProvider == null) {
			testStaticNodeLabelItemProvider = new TestStaticNodeLabelItemProvider(this);
		}

		return testStaticNodeLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.tests.util.labels.TestDynamicEdgeLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestDynamicEdgeLabelItemProvider testDynamicEdgeLabelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.tests.util.labels.TestDynamicEdgeLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestDynamicEdgeLabelAdapter() {
		if (testDynamicEdgeLabelItemProvider == null) {
			testDynamicEdgeLabelItemProvider = new TestDynamicEdgeLabelItemProvider(this);
		}

		return testDynamicEdgeLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.tests.util.labels.TestStaticEdgeLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestStaticEdgeLabelItemProvider testStaticEdgeLabelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.tests.util.labels.TestStaticEdgeLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestStaticEdgeLabelAdapter() {
		if (testStaticEdgeLabelItemProvider == null) {
			testStaticEdgeLabelItemProvider = new TestStaticEdgeLabelItemProvider(this);
		}

		return testStaticEdgeLabelItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (testDynamicEdgeLabelItemProvider != null) testDynamicEdgeLabelItemProvider.dispose();
		if (testDynamicLabel1ItemProvider != null) testDynamicLabel1ItemProvider.dispose();
		if (testDynamicNodeLabelItemProvider != null) testDynamicNodeLabelItemProvider.dispose();
		if (testIntegerLabelValueItemProvider != null) testIntegerLabelValueItemProvider.dispose();
		if (testLabelItemProvider != null) testLabelItemProvider.dispose();
		if (testStaticEdgeLabelItemProvider != null) testStaticEdgeLabelItemProvider.dispose();
		if (testStaticNodeLabelItemProvider != null) testStaticNodeLabelItemProvider.dispose();
	}

}
