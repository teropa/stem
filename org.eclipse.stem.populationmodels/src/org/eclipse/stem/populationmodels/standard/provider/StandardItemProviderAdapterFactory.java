package org.eclipse.stem.populationmodels.standard.provider;

/*******************************************************************************
 * Copyright (c) 2009 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.stem.populationmodels.standard.util.StandardAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class StandardItemProviderAdapterFactory extends StandardAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StandardItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.populationmodels.standard.StandardPopulationModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StandardPopulationModelItemProvider standardPopulationModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.populationmodels.standard.StandardPopulationModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStandardPopulationModelAdapter() {
		if (standardPopulationModelItemProvider == null) {
			standardPopulationModelItemProvider = new StandardPopulationModelItemProvider(this);
		}

		return standardPopulationModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.populationmodels.standard.PopulationModelLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PopulationModelLabelItemProvider populationModelLabelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.populationmodels.standard.PopulationModelLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPopulationModelLabelAdapter() {
		if (populationModelLabelItemProvider == null) {
			populationModelLabelItemProvider = new PopulationModelLabelItemProvider(this);
		}

		return populationModelLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.populationmodels.standard.StandardPopulationModelLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StandardPopulationModelLabelItemProvider standardPopulationModelLabelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.populationmodels.standard.StandardPopulationModelLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStandardPopulationModelLabelAdapter() {
		if (standardPopulationModelLabelItemProvider == null) {
			standardPopulationModelLabelItemProvider = new StandardPopulationModelLabelItemProvider(this);
		}

		return standardPopulationModelLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.populationmodels.standard.PopulationModelLabelValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PopulationModelLabelValueItemProvider populationModelLabelValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.populationmodels.standard.PopulationModelLabelValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPopulationModelLabelValueAdapter() {
		if (populationModelLabelValueItemProvider == null) {
			populationModelLabelValueItemProvider = new PopulationModelLabelValueItemProvider(this);
		}

		return populationModelLabelValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.populationmodels.standard.StandardPopulationModelLabelValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StandardPopulationModelLabelValueItemProvider standardPopulationModelLabelValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.populationmodels.standard.StandardPopulationModelLabelValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStandardPopulationModelLabelValueAdapter() {
		if (standardPopulationModelLabelValueItemProvider == null) {
			standardPopulationModelLabelValueItemProvider = new StandardPopulationModelLabelValueItemProvider(this);
		}

		return standardPopulationModelLabelValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.populationmodels.standard.StochasticStandardPopulationModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StochasticStandardPopulationModelItemProvider stochasticStandardPopulationModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.populationmodels.standard.StochasticStandardPopulationModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStochasticStandardPopulationModelAdapter() {
		if (stochasticStandardPopulationModelItemProvider == null) {
			stochasticStandardPopulationModelItemProvider = new StochasticStandardPopulationModelItemProvider(this);
		}

		return stochasticStandardPopulationModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.populationmodels.standard.DemographicPopulationModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DemographicPopulationModelItemProvider demographicPopulationModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.populationmodels.standard.DemographicPopulationModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDemographicPopulationModelAdapter() {
		if (demographicPopulationModelItemProvider == null) {
			demographicPopulationModelItemProvider = new DemographicPopulationModelItemProvider(this);
		}

		return demographicPopulationModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.populationmodels.standard.PopulationGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PopulationGroupItemProvider populationGroupItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.populationmodels.standard.PopulationGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPopulationGroupAdapter() {
		if (populationGroupItemProvider == null) {
			populationGroupItemProvider = new PopulationGroupItemProvider(this);
		}

		return populationGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.populationmodels.standard.StandardPopulationInitializer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StandardPopulationInitializerItemProvider standardPopulationInitializerItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.populationmodels.standard.StandardPopulationInitializer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStandardPopulationInitializerAdapter() {
		if (standardPopulationInitializerItemProvider == null) {
			standardPopulationInitializerItemProvider = new StandardPopulationInitializerItemProvider(this);
		}

		return standardPopulationInitializerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.populationmodels.standard.SeasonalPopulationModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SeasonalPopulationModelItemProvider seasonalPopulationModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.populationmodels.standard.SeasonalPopulationModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSeasonalPopulationModelAdapter() {
		if (seasonalPopulationModelItemProvider == null) {
			seasonalPopulationModelItemProvider = new SeasonalPopulationModelItemProvider(this);
		}

		return seasonalPopulationModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.populationmodels.standard.YetiPopulationInitializer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected YetiPopulationInitializerItemProvider yetiPopulationInitializerItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.populationmodels.standard.YetiPopulationInitializer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createYetiPopulationInitializerAdapter() {
		if (yetiPopulationInitializerItemProvider == null) {
			yetiPopulationInitializerItemProvider = new YetiPopulationInitializerItemProvider(this);
		}

		return yetiPopulationInitializerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.stem.populationmodels.standard.MosquitoPopulationModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MosquitoPopulationModelItemProvider mosquitoPopulationModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.stem.populationmodels.standard.MosquitoPopulationModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMosquitoPopulationModelAdapter() {
		if (mosquitoPopulationModelItemProvider == null) {
			mosquitoPopulationModelItemProvider = new MosquitoPopulationModelItemProvider(this);
		}

		return mosquitoPopulationModelItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (standardPopulationModelItemProvider != null) standardPopulationModelItemProvider.dispose();
		if (populationModelLabelItemProvider != null) populationModelLabelItemProvider.dispose();
		if (standardPopulationModelLabelItemProvider != null) standardPopulationModelLabelItemProvider.dispose();
		if (populationModelLabelValueItemProvider != null) populationModelLabelValueItemProvider.dispose();
		if (standardPopulationModelLabelValueItemProvider != null) standardPopulationModelLabelValueItemProvider.dispose();
		if (stochasticStandardPopulationModelItemProvider != null) stochasticStandardPopulationModelItemProvider.dispose();
		if (demographicPopulationModelItemProvider != null) demographicPopulationModelItemProvider.dispose();
		if (populationGroupItemProvider != null) populationGroupItemProvider.dispose();
		if (standardPopulationInitializerItemProvider != null) standardPopulationInitializerItemProvider.dispose();
		if (seasonalPopulationModelItemProvider != null) seasonalPopulationModelItemProvider.dispose();
		if (yetiPopulationInitializerItemProvider != null) yetiPopulationInitializerItemProvider.dispose();
		if (mosquitoPopulationModelItemProvider != null) mosquitoPopulationModelItemProvider.dispose();
	}

}
